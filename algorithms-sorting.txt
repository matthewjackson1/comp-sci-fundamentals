#### Questions ####


> Write pseudocode for quicksort.

Sort(A)
	Quicksort(A, 1, n)

FUNCTION quickSort(arr,low,high)
	IF low < high
		CALL partition WITH arr, low and high RETURNING pivotLocation
		CALL quickSort WITH arr, low and pivotLocation-1
		CALL quickSort WITH arr, pivot-location+1 and high
	END IF

FUNCTION partition(arr,low,high)
	SET pivot TO arr[low]
	SET leftwall TO low
	FOR i = low + 1 TO high 
		IF (arr[i]<pivot) THEN
			SET leftwall TO leftwall + 1
			CALL swap WITH arr[i] and arr[leftwall])
		END IF
	END FOR
	CALL swap WITH arr[low] and arr[leftwall]



> Pick two of the search algorithms discussed in this checkpoint and implement each in the language of your choice.


------------

 FUNCTION selectionSort(collection)
   # #1
   FOR i = FIRST INDEX of collection to LAST INDEX of collection - 1
     # #2
     SET minIndex to i
     # #3
     FOR j = (i + 1) to LAST INDEX of collection
       IF collection[j] < collection[minIndex] THEN
         # #4
         SET minIndex to j  
       END IF
     END FOR

     # #5
     SET tmp to collection[i]
     SET collection[i] to collection[minIndex]
     SET collection[minIndex] to tmp
   END FOR
   RETURN collection
 END FUNCTION

 const selectionSort = (collection) => {
 	for (let i=0; i < collection.length-1; i++) {
 		let minIndex = i;
 		for (let j = i+1; j < collection.length) {
 			if (collection[j] < collection[minIndex]) {
 				minIndex = j;
 			}
 		}
 		let tmp = collection[i];
 		collection[i] = collection[minIndex];
 		collection[minIndex] = tmp;
 	}
 	return collection;
 }



---------------

 FUNCTION bubbleSort(collection)
   # #1
   REPEAT
     SET swapped to false

     # #2
     FOR i = FIRST INDEX of collection to LAST INDEX of collection - 1
       # #3
       IF collection[i] > collection[i + 1]
         SET tmp to collection[i]
         SET collection[i] to collection[i + 1]
         SET collection[i + 1] to tmp
         SET swapped to true
       END IF
     END FOR
   UNTIL swapped is FALSE

   RETURN collection
 END FUNCTION


 const bubbleSort = (collection) => {
 	while (swapped === false) {
 		let swapped = false;
 		for (let i=0; collection.length - 1; i++) {
 			if (collection[i] < collection[i+1]) {
 				let tmp = collection[i];
 				collection[i] = collection[i+1];
 				collection[i+1] = tmp;
 				swapped = true;
 			}
 		}
 	}
 	return collection;
 }


-----------

> We talked about time complexity in a previous checkpoint, and how to get an idea of the efficiency of an algorithm. After looking at the pseudocode for the above sorting methods, identify why merge sort and quick sort are much more efficient than the others. Walking through each algorithm with a few sample collections may help.

- Quicksort and merge sort have O(n log n) time complexity on average, whereas bubblesort, selection sort and insertion sort are O(n^2) time complexity and are generally slower, having nested loops.


> All of the sorts addressed in this checkpoint are known as comparison sorts. Research bucket sort and explain how it works. What is the ideal input for bucket sort?


- In bucket sort, the elements to be sorted are distributed among an array of initially empty buckets (binned by range). 
- The buckets are then sorted individually, either using a recursive bucket sort or another sorting algorithm. 
- Once buckets are sorted, they are merged back together to produce a single sorted array.
- Bucket sort has a time complexity of O(n)
- The ideal input is uniformly distributed across a range, to take advantage of the algorithm's speed.



