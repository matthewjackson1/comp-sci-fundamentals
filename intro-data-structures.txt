 #### Questions ####


// a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]
 let rideQueue = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];

// b) Insert a new person, "Mary" at the end of the line.  In other words, you should insert Mary after Mike.
 rideQueue.push("Mary");

// c) Find a person in line, named "Josh."  This function should return the position of 2 in the array, (recall that arrays are 0-based).

let rideQueue = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];
const findQueuePosition = (name, queue) => {
	let personIndex = queue.indexOf(name); 
	return (personIndex == -1) ? name + " not found" : personIndex;
}

findQueuePosition("Josh", rideQueue);

// d) Find a person in line, named "Emily."  What should your function return if it does not find the item in the array?

findQueuePosition("Emily", rideQueue);

// e) What if Ava wants to allow a friend, "Melissa" to cut in line in front of her.  How would you code this, so that Melissa appears before Ava?

const pushInLine = (friend, name, queue) => {
	let position = findQueuePosition(name, queue);
	if (!isNaN(position)) {
		queue = queue.splice(position, 0, friend);
	}
	else {
		return position;
	}
}

pushInLine("Melissa", "Ava", rideQueue);

// f) If Patrick wants to leave the line, how would you delete him from the array?

const leaveQueue = (name, queue) => {
	let position = findQueuePosition(name, queue);
	if (!isNaN(position)) {
   		queue.splice(position, 1);
	}
	else {
		return position;
	};
};

leaveQueue("Patrick", rideQueue);



>> Provide another real-world example that you can model using a data structure.

- A dictionary of words and definitions can be modelled using an object literal in JavaScript with key-value pairs, with the word as the key and the definition as the value. E.g. 'var dictionary = {"word1":"definition1","word2":"definition2"};'

>> How would your data structure allow developers to access and manipulate the data?

- To access the definition of a word, you simply say something like 'dictionary["word1"]'. 
- To edit the definition they would reassign the value like 'dictionary["word1"] = "New definition"'.
- To remove a word from the dictionary, you could say something like 'dictionary.remove("word1");'
