#### Questions ####

> What is time complexity and what is its relation to algorithms?

A: an estimate of the time it takes to run a computer program (generally expressed as a function in big O notation)

> What is runtime?

A: Often synonymous with time complexity, this can also refer to the physical time duration of an algorithm.

> How is the runtime of an algorithm calculated?

A: Run through your algorithm and identify the operational complexity of each expression.  Sum up the number of instructions processed by the algorithm's expressions and then simplify this expression to the largest term and drop any constants.

> Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

- Constant: O(1)
- Logarithmic: O(log n)
- Linear: O(n)
- Log-linear: O(n log n)
- Quadratic: O(n^2)
- Exponential: O(2^n)
- Factorial: O(n!)

> Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

Leaving raw meat out of the fridge - the growth rate of bacteria on the meat is exponential as they divide in two every, say 20 minutes. From 1 bacteria you could have 16.7 million after 8 hours.

> Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

- Linear: 0(n)


>Determine the time complexity of the following snippet of code.

If you get stuck, read through the graphical representation section again.

  FUNCTION foo(array)
    FOR each number in the array
      FOR each number in the array
        print "Hello"
      END FOR
    END FOR
  END FUNCTION

- Quadratic: O(n^2)


> Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

- Exponential: O(2^n)


> Out of the code snippets you just saw, which is the most time efficient?

- The first one, linear.